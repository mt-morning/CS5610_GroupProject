{"version":3,"sources":["webpack:///./src/InventoryList.jsx"],"names":["InventoryList","React","Component","constructor","state","inventory","addProduct","bind","deleteProduct","componentDidMount","loadData","componentDidUpdate","prevProps","location","search","prevSearch","props","params","URLSearchParams","vars","get","quantity","parseInt","console","log","query","data","graphQLFetch","setState","productList","product","index","pathname","history","id","productDelete","prevState","newList","push","splice","issues","render","match","path","ProductInformation"],"mappings":"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","file":"server.c426903d97833c57a4b0.hot-update.js","sourcesContent":["import React from 'react';\r\nimport URLSearchParams from 'url-search-params';\r\nimport { Route } from 'react-router-dom';\r\nimport { Panel } from 'react-bootstrap';\r\n\r\nimport ProductFilter from './ProductFilter.jsx';\r\nimport InventoryTable from './InventoryTable.jsx';\r\nimport ProductAdd from './ProductAdd.jsx';\r\nimport graphQLFetch from './graphQLFetch.js';\r\nimport ProductInformation from './ProductInformation.jsx';\r\nimport store from './store.js';\r\n\r\n/**\r\n * Represent overall inventory list in webpage.\r\n */\r\nexport default class InventoryList extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { inventory: [] };\r\n    this.addProduct = this.addProduct.bind(this);\r\n    this.deleteProduct = this.deleteProduct.bind(this);\r\n  }\r\n\r\n  // Pg 64\r\n  componentDidMount() {\r\n    this.loadData();\r\n  }\r\n\r\n  // pg 245\r\n  componentDidUpdate(prevProps) {\r\n    const { location: { search: prevSearch } } = prevProps;\r\n    const { location: { search } } = this.props;\r\n    if (prevSearch !== search) {\r\n      this.loadData();\r\n    }\r\n  }\r\n\r\n  // Pg 64\r\n  async loadData() {\r\n    const { location: { search } } = this.props;\r\n    const params = new URLSearchParams(search);\r\n    const vars = {};\r\n    if (params.get('quantity')) vars.quantity = parseInt(params.get('quantity'), 10);\r\n\r\n    // eslint-disable-next-line no-console\r\n    console.log('Loading data....');\r\n\r\n    // Pg 105\r\n    const query = `query productList($quantity: Int) {\r\n      productList(quantity: $quantity) {\r\n        id description createdDate\r\n        expirationDate quantity\r\n      }\r\n    }`;\r\n\r\n    const data = await graphQLFetch(query, vars);\r\n    if (data) {\r\n      // eslint-disable-next-line no-console\r\n      console.log('Data retrieved from server.');\r\n      this.setState({ inventory: data.productList });\r\n    }\r\n  }\r\n\r\n  /* addIssue() issueAdd() */\r\n  async addProduct(product) {\r\n    product.quantity = 1; // TODO convert string to int and remove this line\r\n    const query = `mutation productAdd($product: ProductInputs!) {\r\n          productAdd(product: $product) {\r\n            id\r\n          }\r\n        }`;\r\n\r\n    // eslint-disable-next-line no-console\r\n    console.log('add issue query:', query);\r\n\r\n    const data = await graphQLFetch(query, { product });\r\n    if (data) {\r\n      this.loadData();\r\n    }\r\n  }\r\n\r\n  // need to revise async delete\r\n  async deleteProduct(index) {\r\n    const query = `mutation productDelete($id: Int!) {\r\n      productDelete(id: $id)\r\n    }`;\r\n    const { inventory } = this.state;\r\n    const { location: { pathname, search }, history } = this.props;\r\n    const { id } = inventory[index];\r\n    const data = await graphQLFetch(query, { id });\r\n    if (data && data.productDelete) {\r\n      this.setState((prevState) => {\r\n        const newList = [...prevState.inventory];\r\n        if (pathname === `/inventory/${id}`) {\r\n          history.push({ pathname: '/inventory', search });\r\n        }\r\n        newList.splice(index, 1);\r\n        return { issues: newList };\r\n      });\r\n    } else {\r\n      this.loadData();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { inventory } = this.state;\r\n    const { match } = this.props;\r\n    return (\r\n        <React.Fragment>\r\n            <Panel>\r\n                <Panel.Heading>\r\n                    <Panel.Title toggle>Filter</Panel.Title>\r\n                </Panel.Heading>\r\n                <Panel.Body collapsible>\r\n                    <ProductFilter />\r\n                </Panel.Body>\r\n            </Panel>\r\n        <hr />\r\n        <InventoryTable inventory={inventory} deleteProduct={this.deleteProduct} />\r\n        <hr />\r\n        <ProductAdd addProduct={this.addProduct} />\r\n        <hr />\r\n        <Route path={`${match.path}/:id`} component={ProductInformation} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}